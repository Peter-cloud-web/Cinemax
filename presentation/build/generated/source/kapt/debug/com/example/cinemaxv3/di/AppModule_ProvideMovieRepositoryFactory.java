// Generated by Dagger (https://dagger.dev).
package com.example.cinemaxv3.di;

import com.example.db.MovieDatabase;
import com.example.domain.MovieRepository;
import com.example.service.MovieApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.ktor.client.HttpClient;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideMovieRepositoryFactory implements Factory<MovieRepository> {
  private final Provider<HttpClient> httpClientProvider;

  private final Provider<MovieApi> apiProvider;

  private final Provider<MovieDatabase> dbProvider;

  public AppModule_ProvideMovieRepositoryFactory(Provider<HttpClient> httpClientProvider,
      Provider<MovieApi> apiProvider, Provider<MovieDatabase> dbProvider) {
    this.httpClientProvider = httpClientProvider;
    this.apiProvider = apiProvider;
    this.dbProvider = dbProvider;
  }

  @Override
  public MovieRepository get() {
    return provideMovieRepository(httpClientProvider.get(), apiProvider.get(), dbProvider.get());
  }

  public static AppModule_ProvideMovieRepositoryFactory create(
      Provider<HttpClient> httpClientProvider, Provider<MovieApi> apiProvider,
      Provider<MovieDatabase> dbProvider) {
    return new AppModule_ProvideMovieRepositoryFactory(httpClientProvider, apiProvider, dbProvider);
  }

  public static MovieRepository provideMovieRepository(HttpClient httpClient, MovieApi api,
      MovieDatabase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideMovieRepository(httpClient, api, db));
  }
}
